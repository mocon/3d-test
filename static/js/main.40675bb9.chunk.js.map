{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Shoe","ref","useRef","gltf","useLoader","GLTFLoader","useFrame","current","rotation","y","object","scene","position","rotation-y","Ring","props","mesh","position-y","rotation-x","attach","args","color","Pedestal","flatShading","roughness","metalness","shininess","Scene","intensity","fallback","enablePan","zoomSpeed","App","camera","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iQASA,SAASA,IACP,IAAMC,EAAMC,mBACNC,EAAOC,YAAUC,IAAY,eAMnC,OAJAC,aAAS,WACPL,EAAIM,QAAQC,SAASC,GAAK,QAI1B,+BACER,IAAKA,EACLS,OAAQP,EAAKQ,MACbC,SAAU,CAAC,EAAG,EAAG,GACjBC,aAAY,SAKlB,SAASC,EAAKC,GACZ,IAAMd,EAAMC,mBAOZ,OACE,kBAAC,IAAEc,KAAH,eAAQf,IAAKA,GAASc,EAAtB,CAA6BE,cAAa,IAAMC,cAAa,SAC3D,wCAAoBC,OAAO,WAAWC,KAAM,CAAC,GAAK,IAAM,OACxD,yCAAqBD,OAAO,WAAWE,MAAM,WAKnD,SAASC,EAASP,GAChB,IAAMd,EAAMC,mBAEZ,OACE,kBAAC,IAAEc,KAAH,eAAQf,IAAKA,GAASc,EAAtB,CAA6BE,cAAa,OACxC,4CAAwBE,OAAO,WAAWC,KAAM,CAAC,GAAK,IAAK,IAAK,OAChE,uCACEG,aAAa,EACbC,UAAW,GACXC,UAAW,GACXC,UAAW,EACXP,OAAO,WACPE,MAAM,aAMd,SAASM,IACP,OACE,oCACE,uCACA,gCAAYC,UAAW,EAAGhB,SAAU,CAAC,GAAI,EAAG,KAC5C,gCAAYgB,UAAW,EAAGhB,SAAU,EAAE,GAAI,EAAG,KAC7C,kBAAC,WAAD,CAAUiB,SAAU,MAClB,kBAAC7B,EAAD,OAEF,kBAACc,EAAD,MACA,kBAACQ,EAAD,MACA,kBAAC,IAAD,CAAeQ,WAAW,EAAOC,UAAW,MAuBnCC,MAlBf,WACE,OACE,oCACE,kBAAC,IAAD,CACEC,OAAQ,CACNrB,SAAU,CAAC,EAAG,EAAG,KAGnB,kBAACe,EAAD,OAGF,8BACE,2DC7EYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.40675bb9.chunk.js","sourcesContent":["import React, { useRef, Suspense } from 'react'\nimport { OrbitControls } from 'drei'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber'\nimport { a, useSpring } from 'react-spring/three'\nimport { Controls, useControl } from 'react-three-gui'\n\nimport './App.css'\n\nfunction Shoe() {\n  const ref = useRef()\n  const gltf = useLoader(GLTFLoader, '/scene.gltf')\n\n  useFrame(() => {\n    ref.current.rotation.y += 0.001\n  })\n\n  return (\n    <primitive\n      ref={ref}\n      object={gltf.scene}\n      position={[0, 0, 0]}\n      rotation-y={1.5708}\n    />\n  )\n}\n\nfunction Ring(props) {\n  const ref = useRef()\n  // const size = useControl('Size', {\n  //   type: 'number',\n  //   min: 0.8,\n  //   max: 0.99,\n  // })\n\n  return (\n    <a.mesh ref={ref} {...props} position-y={-0.46} rotation-x={-1.5708}>\n      <ringBufferGeometry attach='geometry' args={[0.9, 0.91, 100]} />\n      <meshLambertMaterial attach='material' color='white' />\n    </a.mesh>\n  )\n}\n\nfunction Pedestal(props) {\n  const ref = useRef()\n\n  return (\n    <a.mesh ref={ref} {...props} position-y={-1.21}>\n      <cylinderBufferGeometry attach='geometry' args={[0.9, 1.2, 1.5, 120]} />\n      <meshPhongMaterial\n        flatShading={true}\n        roughness={0.5}\n        metalness={0.8}\n        shininess={5}\n        attach='material'\n        color='#050505'\n      />\n    </a.mesh>\n  )\n}\n\nfunction Scene() {\n  return (\n    <>\n      <ambientLight />\n      <pointLight intensity={1} position={[10, 2, 4]} />\n      <pointLight intensity={1} position={[-10, 2, 4]} />\n      <Suspense fallback={null}>\n        <Shoe />\n      </Suspense>\n      <Ring />\n      <Pedestal />\n      <OrbitControls enablePan={false} zoomSpeed={0.2} />\n    </>\n  )\n}\n\nfunction App() {\n  return (\n    <>\n      <Canvas\n        camera={{\n          position: [0, 0, 2],\n        }}\n      >\n        <Scene />\n      </Canvas>\n      {/* <Controls /> */}\n      <main>\n        <h1>Nike Air Zoom Pegasus 36</h1>\n      </main>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}